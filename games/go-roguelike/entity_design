entity object:
    id
    list of components?

component object:
    id
    data map, new data values to add to entity when component is added

system object:
    pointer to func to run
    list of components to match against entities


entity manager:
    latest id

    entities map, key entity id, value list of components
    components map? key component, value list of entities

    data map, key entity id, value map of data values (interface{}s)

    list of system objects

    new entity:
        new id = latest id + 1
        create new entity with no components and no data
        add entity to list
        return entity

    del entity:
        remove all components from entity
        remove entity from list

    new system:
        create new system object
        add system to system list

    update:
        for each system in list:
            grab list of entities with components in the system's list
            run system's func, with list of entities

    get entities with component:
        for each entity in list:
            if entity has component:
                add entity to new list
        return new list

    get components for entity:
        get components of entity in list
        return components

    set component for entity:
        add component to entity in map (or delete it completely?)
        add new data from component to entity

    get data for entity:
        get all (or specific?) data for entity
        return data

    set data for entity:
        set specific data for entity in data map

